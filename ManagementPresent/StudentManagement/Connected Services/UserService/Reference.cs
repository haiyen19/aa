//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        StudentService.Response.ResponseService<StudentService.Model.CurrentUser> Login(StudentService.Request.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.CurrentUser>> LoginAsync(StudentService.Request.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        StudentService.Response.ResponseService<int> Save(StudentService.Model.User request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveAsync(StudentService.Model.User request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        StudentService.Response.ResponseService<int> Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/User", ReplyAction="http://tempuri.org/IUserService/UserResponse")]
        StudentService.Response.ResponseService<StudentService.Model.User> User(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/User", ReplyAction="http://tempuri.org/IUserService/UserResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.User>> UserAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Users", ReplyAction="http://tempuri.org/IUserService/UsersResponse")]
        StudentService.Response.ResponseService<StudentService.Model.UserViewModel[]> Users(StudentService.Request.UserPaginationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Users", ReplyAction="http://tempuri.org/IUserService/UsersResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.UserViewModel[]>> UsersAsync(StudentService.Request.UserPaginationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ProfileStudent", ReplyAction="http://tempuri.org/IUserService/ProfileStudentResponse")]
        StudentService.Response.ResponseService<StudentService.Model.ProfilesStudent> ProfileStudent(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ProfileStudent", ReplyAction="http://tempuri.org/IUserService/ProfileStudentResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ProfilesStudent>> ProfileStudentAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ProfileLecture", ReplyAction="http://tempuri.org/IUserService/ProfileLectureResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StudentService.Model.ProfilesStudent))]
        StudentService.Response.ResponseService<StudentService.Model.Profiles> ProfileLecture(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ProfileLecture", ReplyAction="http://tempuri.org/IUserService/ProfileLectureResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Profiles>> ProfileLectureAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePassword", ReplyAction="http://tempuri.org/IUserService/ChangePasswordResponse")]
        StudentService.Response.ResponseService<int> ChangePassword(StudentService.Request.ChangePasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePassword", ReplyAction="http://tempuri.org/IUserService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> ChangePasswordAsync(StudentService.Request.ChangePasswordRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : StudentManagement.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<StudentManagement.UserService.IUserService>, StudentManagement.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.CurrentUser> Login(StudentService.Request.LoginRequest request) {
            return base.Channel.Login(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.CurrentUser>> LoginAsync(StudentService.Request.LoginRequest request) {
            return base.Channel.LoginAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> Save(StudentService.Model.User request) {
            return base.Channel.Save(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveAsync(StudentService.Model.User request) {
            return base.Channel.SaveAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> Delete(int Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.User> User(int Id) {
            return base.Channel.User(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.User>> UserAsync(int Id) {
            return base.Channel.UserAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.UserViewModel[]> Users(StudentService.Request.UserPaginationRequest request) {
            return base.Channel.Users(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.UserViewModel[]>> UsersAsync(StudentService.Request.UserPaginationRequest request) {
            return base.Channel.UsersAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.ProfilesStudent> ProfileStudent(int Id) {
            return base.Channel.ProfileStudent(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ProfilesStudent>> ProfileStudentAsync(int Id) {
            return base.Channel.ProfileStudentAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.Profiles> ProfileLecture(int Id) {
            return base.Channel.ProfileLecture(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Profiles>> ProfileLectureAsync(int Id) {
            return base.Channel.ProfileLectureAsync(Id);
        }
        
        public StudentService.Response.ResponseService<int> ChangePassword(StudentService.Request.ChangePasswordRequest request) {
            return base.Channel.ChangePassword(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> ChangePasswordAsync(StudentService.Request.ChangePasswordRequest request) {
            return base.Channel.ChangePasswordAsync(request);
        }
    }
}
