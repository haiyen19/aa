//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.ScoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScoreService.IScoreService")]
    public interface IScoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsInsertScore", ReplyAction="http://tempuri.org/IScoreService/StudentsInsertScoreResponse")]
        StudentService.Response.ResponseService<StudentService.Model.InsertStudentScoreModel[]> StudentsInsertScore(StudentService.Request.SubjectAndClassIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsInsertScore", ReplyAction="http://tempuri.org/IScoreService/StudentsInsertScoreResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.InsertStudentScoreModel[]>> StudentsInsertScoreAsync(StudentService.Request.SubjectAndClassIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/TopStudent", ReplyAction="http://tempuri.org/IScoreService/TopStudentResponse")]
        StudentService.Response.ResponseService<StudentService.Model.TopStudentVm[]> TopStudent(StudentService.Request.TopStudentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/TopStudent", ReplyAction="http://tempuri.org/IScoreService/TopStudentResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.TopStudentVm[]>> TopStudentAsync(StudentService.Request.TopStudentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsScoreView", ReplyAction="http://tempuri.org/IScoreService/StudentsScoreViewResponse")]
        StudentService.Response.ResponseService<StudentService.Model.ScoreStudentViewModel[]> StudentsScoreView(StudentService.Request.SubjectAndClassIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsScoreView", ReplyAction="http://tempuri.org/IScoreService/StudentsScoreViewResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ScoreStudentViewModel[]>> StudentsScoreViewAsync(StudentService.Request.SubjectAndClassIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/SaveScoreAdmin", ReplyAction="http://tempuri.org/IScoreService/SaveScoreAdminResponse")]
        StudentService.Response.ResponseService<int> SaveScoreAdmin(StudentService.Request.ScoreStudentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/SaveScoreAdmin", ReplyAction="http://tempuri.org/IScoreService/SaveScoreAdminResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveScoreAdminAsync(StudentService.Request.ScoreStudentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/SaveScoreByLecture", ReplyAction="http://tempuri.org/IScoreService/SaveScoreByLectureResponse")]
        StudentService.Response.ResponseService<int> SaveScoreByLecture(StudentService.Request.SaveScoreByLectureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/SaveScoreByLecture", ReplyAction="http://tempuri.org/IScoreService/SaveScoreByLectureResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveScoreByLectureAsync(StudentService.Request.SaveScoreByLectureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/Delete", ReplyAction="http://tempuri.org/IScoreService/DeleteResponse")]
        StudentService.Response.ResponseService<int> Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/Delete", ReplyAction="http://tempuri.org/IScoreService/DeleteResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsInsertScoreByLecture", ReplyAction="http://tempuri.org/IScoreService/StudentsInsertScoreByLectureResponse")]
        StudentService.Response.ResponseService<StudentService.Model.StudentInsertScoreByLecturer[]> StudentsInsertScoreByLecture(int OpenClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/StudentsInsertScoreByLecture", ReplyAction="http://tempuri.org/IScoreService/StudentsInsertScoreByLectureResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.StudentInsertScoreByLecturer[]>> StudentsInsertScoreByLectureAsync(int OpenClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/ScoreViewByStudent", ReplyAction="http://tempuri.org/IScoreService/ScoreViewByStudentResponse")]
        StudentService.Response.ResponseService<StudentService.Model.ScoreViewModelByStudent[]> ScoreViewByStudent(StudentService.Request.StudentViewScoreRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreService/ScoreViewByStudent", ReplyAction="http://tempuri.org/IScoreService/ScoreViewByStudentResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ScoreViewModelByStudent[]>> ScoreViewByStudentAsync(StudentService.Request.StudentViewScoreRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScoreServiceChannel : StudentManagement.ScoreService.IScoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScoreServiceClient : System.ServiceModel.ClientBase<StudentManagement.ScoreService.IScoreService>, StudentManagement.ScoreService.IScoreService {
        
        public ScoreServiceClient() {
        }
        
        public ScoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.InsertStudentScoreModel[]> StudentsInsertScore(StudentService.Request.SubjectAndClassIdRequest request) {
            return base.Channel.StudentsInsertScore(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.InsertStudentScoreModel[]>> StudentsInsertScoreAsync(StudentService.Request.SubjectAndClassIdRequest request) {
            return base.Channel.StudentsInsertScoreAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.TopStudentVm[]> TopStudent(StudentService.Request.TopStudentRequest request) {
            return base.Channel.TopStudent(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.TopStudentVm[]>> TopStudentAsync(StudentService.Request.TopStudentRequest request) {
            return base.Channel.TopStudentAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.ScoreStudentViewModel[]> StudentsScoreView(StudentService.Request.SubjectAndClassIdRequest request) {
            return base.Channel.StudentsScoreView(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ScoreStudentViewModel[]>> StudentsScoreViewAsync(StudentService.Request.SubjectAndClassIdRequest request) {
            return base.Channel.StudentsScoreViewAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> SaveScoreAdmin(StudentService.Request.ScoreStudentRequest request) {
            return base.Channel.SaveScoreAdmin(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveScoreAdminAsync(StudentService.Request.ScoreStudentRequest request) {
            return base.Channel.SaveScoreAdminAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> SaveScoreByLecture(StudentService.Request.SaveScoreByLectureRequest request) {
            return base.Channel.SaveScoreByLecture(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveScoreByLectureAsync(StudentService.Request.SaveScoreByLectureRequest request) {
            return base.Channel.SaveScoreByLectureAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> Delete(int Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.StudentInsertScoreByLecturer[]> StudentsInsertScoreByLecture(int OpenClassId) {
            return base.Channel.StudentsInsertScoreByLecture(OpenClassId);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.StudentInsertScoreByLecturer[]>> StudentsInsertScoreByLectureAsync(int OpenClassId) {
            return base.Channel.StudentsInsertScoreByLectureAsync(OpenClassId);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.ScoreViewModelByStudent[]> ScoreViewByStudent(StudentService.Request.StudentViewScoreRequest request) {
            return base.Channel.ScoreViewByStudent(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.ScoreViewModelByStudent[]>> ScoreViewByStudentAsync(StudentService.Request.StudentViewScoreRequest request) {
            return base.Channel.ScoreViewByStudentAsync(request);
        }
    }
}
