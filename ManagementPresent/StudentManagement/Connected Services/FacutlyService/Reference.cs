//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.FacutlyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacutlyService.IFacutlyService")]
    public interface IFacutlyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Facutlys", ReplyAction="http://tempuri.org/IFacutlyService/FacutlysResponse")]
        StudentService.Response.ResponseService<StudentService.Model.Facutly[]> Facutlys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Facutlys", ReplyAction="http://tempuri.org/IFacutlyService/FacutlysResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Facutly[]>> FacutlysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Save", ReplyAction="http://tempuri.org/IFacutlyService/SaveResponse")]
        StudentService.Response.ResponseService<int> Save(StudentService.Model.Facutly request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Save", ReplyAction="http://tempuri.org/IFacutlyService/SaveResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveAsync(StudentService.Model.Facutly request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Facutly", ReplyAction="http://tempuri.org/IFacutlyService/FacutlyResponse")]
        StudentService.Response.ResponseService<StudentService.Model.Facutly> Facutly(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Facutly", ReplyAction="http://tempuri.org/IFacutlyService/FacutlyResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Facutly>> FacutlyAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Delete", ReplyAction="http://tempuri.org/IFacutlyService/DeleteResponse")]
        StudentService.Response.ResponseService<int> Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Delete", ReplyAction="http://tempuri.org/IFacutlyService/DeleteResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Add", ReplyAction="http://tempuri.org/IFacutlyService/AddResponse")]
        StudentService.Response.ResponseService<int> Add(StudentService.Model.Facutly request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacutlyService/Add", ReplyAction="http://tempuri.org/IFacutlyService/AddResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> AddAsync(StudentService.Model.Facutly request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacutlyServiceChannel : StudentManagement.FacutlyService.IFacutlyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacutlyServiceClient : System.ServiceModel.ClientBase<StudentManagement.FacutlyService.IFacutlyService>, StudentManagement.FacutlyService.IFacutlyService {
        
        public FacutlyServiceClient() {
        }
        
        public FacutlyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacutlyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacutlyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacutlyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.Facutly[]> Facutlys() {
            return base.Channel.Facutlys();
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Facutly[]>> FacutlysAsync() {
            return base.Channel.FacutlysAsync();
        }
        
        public StudentService.Response.ResponseService<int> Save(StudentService.Model.Facutly request) {
            return base.Channel.Save(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveAsync(StudentService.Model.Facutly request) {
            return base.Channel.SaveAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.Facutly> Facutly(int Id) {
            return base.Channel.Facutly(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Facutly>> FacutlyAsync(int Id) {
            return base.Channel.FacutlyAsync(Id);
        }
        
        public StudentService.Response.ResponseService<int> Delete(int Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
        
        public StudentService.Response.ResponseService<int> Add(StudentService.Model.Facutly request) {
            return base.Channel.Add(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> AddAsync(StudentService.Model.Facutly request) {
            return base.Channel.AddAsync(request);
        }
    }
}
