//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.ServiceStudent {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceStudent.IStudentService")]
    public interface IStudentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Add", ReplyAction="http://tempuri.org/IStudentService/AddResponse")]
        StudentService.Response.ResponseService<int> Add(StudentService.Model.Student model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Add", ReplyAction="http://tempuri.org/IStudentService/AddResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> AddAsync(StudentService.Model.Student model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Update", ReplyAction="http://tempuri.org/IStudentService/UpdateResponse")]
        StudentService.Response.ResponseService<int> Update(StudentService.Model.Student model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Update", ReplyAction="http://tempuri.org/IStudentService/UpdateResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> UpdateAsync(StudentService.Model.Student model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Delete", ReplyAction="http://tempuri.org/IStudentService/DeleteResponse")]
        StudentService.Response.ResponseService<int> Delete(int entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Delete", ReplyAction="http://tempuri.org/IStudentService/DeleteResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Students", ReplyAction="http://tempuri.org/IStudentService/StudentsResponse")]
        StudentService.Response.ResponseService<StudentService.Model.Student[]> Students(StudentService.Request.PaginationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/Students", ReplyAction="http://tempuri.org/IStudentService/StudentsResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Student[]>> StudentsAsync(StudentService.Request.PaginationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetById", ReplyAction="http://tempuri.org/IStudentService/GetByIdResponse")]
        StudentService.Response.ResponseService<StudentService.Model.Student> GetById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetById", ReplyAction="http://tempuri.org/IStudentService/GetByIdResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Student>> GetByIdAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentServiceChannel : StudentManagement.ServiceStudent.IStudentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentServiceClient : System.ServiceModel.ClientBase<StudentManagement.ServiceStudent.IStudentService>, StudentManagement.ServiceStudent.IStudentService {
        
        public StudentServiceClient() {
        }
        
        public StudentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentService.Response.ResponseService<int> Add(StudentService.Model.Student model) {
            return base.Channel.Add(model);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> AddAsync(StudentService.Model.Student model) {
            return base.Channel.AddAsync(model);
        }
        
        public StudentService.Response.ResponseService<int> Update(StudentService.Model.Student model) {
            return base.Channel.Update(model);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> UpdateAsync(StudentService.Model.Student model) {
            return base.Channel.UpdateAsync(model);
        }
        
        public StudentService.Response.ResponseService<int> Delete(int entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.Student[]> Students(StudentService.Request.PaginationRequest request) {
            return base.Channel.Students(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Student[]>> StudentsAsync(StudentService.Request.PaginationRequest request) {
            return base.Channel.StudentsAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.Student> GetById(int Id) {
            return base.Channel.GetById(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.Student>> GetByIdAsync(int Id) {
            return base.Channel.GetByIdAsync(Id);
        }
    }
}
