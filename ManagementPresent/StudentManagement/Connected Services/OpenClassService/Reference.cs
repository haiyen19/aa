//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.OpenClassService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OpenClassService.IClassSubjectService")]
    public interface IClassSubjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClass", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassResponse")]
        StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClass(System.Nullable<int> FacultyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClass", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassAsync(System.Nullable<int> FacultyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/SaveOpenClass", ReplyAction="http://tempuri.org/IClassSubjectService/SaveOpenClassResponse")]
        StudentService.Response.ResponseService<int> SaveOpenClass(StudentService.Request.OpenClassRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/SaveOpenClass", ReplyAction="http://tempuri.org/IClassSubjectService/SaveOpenClassResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveOpenClassAsync(StudentService.Request.OpenClassRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/Delete", ReplyAction="http://tempuri.org/IClassSubjectService/DeleteResponse")]
        StudentService.Response.ResponseService<int> Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/Delete", ReplyAction="http://tempuri.org/IClassSubjectService/DeleteResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/GetById", ReplyAction="http://tempuri.org/IClassSubjectService/GetByIdResponse")]
        StudentService.Response.ResponseService<StudentService.Request.OpenClassRequest> GetById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/GetById", ReplyAction="http://tempuri.org/IClassSubjectService/GetByIdResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Request.OpenClassRequest>> GetByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClassForLecture", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassForLectureResponse")]
        StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClassForLecture(int LectureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClassForLecture", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassForLectureResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassForLectureAsync(int LectureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClassForRegistStudent", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassForRegistStudentResponse")]
        StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClassForRegistStudent(int SubjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/OpenClassForRegistStudent", ReplyAction="http://tempuri.org/IClassSubjectService/OpenClassForRegistStudentResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassForRegistStudentAsync(int SubjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/StudentRegist", ReplyAction="http://tempuri.org/IClassSubjectService/StudentRegistResponse")]
        StudentService.Response.ResponseService<int> StudentRegist(StudentService.Request.RegistOpenClassRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/StudentRegist", ReplyAction="http://tempuri.org/IClassSubjectService/StudentRegistResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> StudentRegistAsync(StudentService.Request.RegistOpenClassRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/ResultRegistClassSubjectByStudent", ReplyAction="http://tempuri.org/IClassSubjectService/ResultRegistClassSubjectByStudentResponse" +
            "")]
        StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> ResultRegistClassSubjectByStudent(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/ResultRegistClassSubjectByStudent", ReplyAction="http://tempuri.org/IClassSubjectService/ResultRegistClassSubjectByStudentResponse" +
            "")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> ResultRegistClassSubjectByStudentAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/StudentCancelRegist", ReplyAction="http://tempuri.org/IClassSubjectService/StudentCancelRegistResponse")]
        StudentService.Response.ResponseService<int> StudentCancelRegist(int Id, int IdStudent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassSubjectService/StudentCancelRegist", ReplyAction="http://tempuri.org/IClassSubjectService/StudentCancelRegistResponse")]
        System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> StudentCancelRegistAsync(int Id, int IdStudent);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClassSubjectServiceChannel : StudentManagement.OpenClassService.IClassSubjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClassSubjectServiceClient : System.ServiceModel.ClientBase<StudentManagement.OpenClassService.IClassSubjectService>, StudentManagement.OpenClassService.IClassSubjectService {
        
        public ClassSubjectServiceClient() {
        }
        
        public ClassSubjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClassSubjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClassSubjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClassSubjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClass(System.Nullable<int> FacultyId) {
            return base.Channel.OpenClass(FacultyId);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassAsync(System.Nullable<int> FacultyId) {
            return base.Channel.OpenClassAsync(FacultyId);
        }
        
        public StudentService.Response.ResponseService<int> SaveOpenClass(StudentService.Request.OpenClassRequest request) {
            return base.Channel.SaveOpenClass(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> SaveOpenClassAsync(StudentService.Request.OpenClassRequest request) {
            return base.Channel.SaveOpenClassAsync(request);
        }
        
        public StudentService.Response.ResponseService<int> Delete(int Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Request.OpenClassRequest> GetById(int Id) {
            return base.Channel.GetById(Id);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Request.OpenClassRequest>> GetByIdAsync(int Id) {
            return base.Channel.GetByIdAsync(Id);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClassForLecture(int LectureId) {
            return base.Channel.OpenClassForLecture(LectureId);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassForLectureAsync(int LectureId) {
            return base.Channel.OpenClassForLectureAsync(LectureId);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> OpenClassForRegistStudent(int SubjectId) {
            return base.Channel.OpenClassForRegistStudent(SubjectId);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> OpenClassForRegistStudentAsync(int SubjectId) {
            return base.Channel.OpenClassForRegistStudentAsync(SubjectId);
        }
        
        public StudentService.Response.ResponseService<int> StudentRegist(StudentService.Request.RegistOpenClassRequest request) {
            return base.Channel.StudentRegist(request);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> StudentRegistAsync(StudentService.Request.RegistOpenClassRequest request) {
            return base.Channel.StudentRegistAsync(request);
        }
        
        public StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]> ResultRegistClassSubjectByStudent(int studentId) {
            return base.Channel.ResultRegistClassSubjectByStudent(studentId);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<StudentService.Model.OpenClassModel[]>> ResultRegistClassSubjectByStudentAsync(int studentId) {
            return base.Channel.ResultRegistClassSubjectByStudentAsync(studentId);
        }
        
        public StudentService.Response.ResponseService<int> StudentCancelRegist(int Id, int IdStudent) {
            return base.Channel.StudentCancelRegist(Id, IdStudent);
        }
        
        public System.Threading.Tasks.Task<StudentService.Response.ResponseService<int>> StudentCancelRegistAsync(int Id, int IdStudent) {
            return base.Channel.StudentCancelRegistAsync(Id, IdStudent);
        }
    }
}
